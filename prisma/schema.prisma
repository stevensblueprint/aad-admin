// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  roleName      String
  role          UserRole     @relation(fields: [roleName], references: [roleName])
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  Submission    Submission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Profile schema
model Profile {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  dateOfBirth   String?
  preferredName String?
  phoneNumber   String?
  bio           String?
  university    String?
  industries    String[]
  preferences   String[] @default([])
}

model UserRole {
  roleName    String       @id
  users       User[]
  collections Collection[]
}

model Collection {
  id           String       @id @default(cuid())
  name         String
  roles        UserRole[]
  form         Form         @relation(fields: [formName], references: [name])
  formName     String
  instructions String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isOpen       Boolean
  Submission   Submission[]
}

model Form {
  name       String       @id @unique
  formSchema String
  uiSchema   String
  Collection Collection[]
}

model Submission {
  id            String     @id @default(cuid())
  collection    Collection @relation(fields: [collectionId], references: [id])
  collectionId  String
  data          Json
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  submittedBy   User?      @relation(fields: [submittedById], references: [id])
  submittedById String? // temporary
}
